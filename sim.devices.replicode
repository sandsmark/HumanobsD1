; these programs allow quick prototyping by simulating the operation of the I/O devices.


pgm_grab:(pgm |[] []
   []
      (ptn (fact (mk.goal (fact (cmd grab_right_hand ::) ::) ::) ::) |[])
      (ptn (fact (mk.val self_right_hand position p0: ::) ::) |[])
      (ptn (fact (mk.val thing: p1: ::) ::)) |[])
   |[]
   []
      (<> self_right_hand thing)
      (= p0 p1)
[]
   (inj []
      target:(mk.val self_right_hand attachment thing 1)
      [SYNC_FRONT t:(+ now 100000us) 0 1 stdin nil]
   )
   (inj []
      (fact target t 1 1)
      [SYNC_FRONT t 1 1 stdin nil]
   )
1) |[]

i_pgm_grab:(ipgm pgm_grab |[] RUN_ALWAYS 0us NOTIFY 1) [[SYNC_FRONT now 0 forever root nil 1]]


pgm_release:(pgm |[] []
   []
      (ptn (fact (mk.goal (fact (cmd release_right_hand ::) ::) ::) ::) |[])
   |[]
   |[]
[]
   (inj []
      target:(mk.val self_right_hand attachment thing 1)
      [SYNC_FRONT t:(+ now 100000us) 0 1 stdin nil]
   )
   (inj []
      (|fact target t 1 1)
      [SYNC_FRONT t 1 1 stdin nil]
   )
1) |[]

i_pgm_release:(ipgm pgm_release |[] RUN_ALWAYS 0us NOTIFY 1) [[SYNC_FRONT now 0 forever root nil 1]]


pgm_move_right_hand:(pgm |[] []
   []
      (ptn (fact (mk.goal (fact (mk.val self_right_hand position final_p: ::) ::) ::) ::) |[])
      (ptn (fact (mk.val self_right_hand position init_p: ::) ::) |[])
   |[]
   |[]
[]
   (inj []
      target:(mk.val self_right_hand position (+ init_p (/ (- final_p init_p) 100)) 1)
      [SYNC_FRONT t:(+ now 10000us) 0 1 stdin nil]
   )
   (inj []
      (fact target t 1 1)
      [SYNC_FRONT t 1 1 stdin nil]
   )
1) |[]

i_pgm_move_right_hand:(ipgm pgm_move_right_hand |[] RUN_ALWAYS 0us NOTIFY 1) [[SYNC_FRONT now 0 forever root nil 1]]


pgm_update_thing_pos:(pgm |[] []
   []
      (ptn (fact (mk.val self_right_hand position p: ::) ::) |[])
      (ptn (fact (mk.val self_right_hand attachment thing: ::) ::) |[])
   |[]
   |[]
[]
   (inj []
      target:(mk.val thing position p: 1)
      [SYNC_FRONT now 0 1 stdin nil]
   )
   (inj []
      (fact target now 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
1) |[]

i_pgm_update_thing_pos:(ipgm pgm_update_thing_pos |[] RUN_ALWAYS 0us NOTIFY 1) [[SYNC_FRONT now 0 forever root nil 1]]


; --------------------------------------------



; --------------------------------------------

p1:(pgm |[]  |[] [(cmd speak ["Take a blue cube." 0us] 1)]
1) |[]

ip1:(ipgm p1 |[] RUN_ONCE 120000us NOTIFY 1) [[SYNC_FRONT now 0 forever root nil 0]]

p2:(pgm |[]  |[] [(cmd speak ["put it there." 0us] 1)]
1) |[]

ip2:(ipgm p2 |[] RUN_ONCE 2000000us NOTIFY 1) [[SYNC_FRONT now 0 forever root nil 0]]

; --------------------------------------------

; init_move.

init_move_1:(mk.val self_right_hand position (vec3 0 0 0) 1) |[]
f_init_move_1:(fact init_move_1 0us 1 1) |[]

init_move_2:(cmd move_hand [self_right_hand (vec3 10 10 10) 10us] 1) |[]
f_init_move_2:(fact init_move_2 0us 1 1) |[]

init_move:(cst [f_init_move_1 f_init_move_2] [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; move.

move_1:(mk.val self_right_hand position (vec3 0 0 0) 1) |[]
f_move_1:(fact move_1 0us 1 1) |[]

move_2:(mk.val self_right_hand position (vec3 10 10 10) 1) |[]
f_move_2:(fact move_2 10us 1 1) |[]

move:(idp [f_move_1 f_move_2] [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; move feedback.

move_feedback_1:(iidp init_move [self_right_hand (vec3 10 10 10) 10us (vec3 0 0 0) 0us] 1) |[]
f_move_feedback_1:(fact move_feedback_1 0us 1 1) |[]

move_feedback_2:(mk.val self_right_hand position (vec3 10 10 10) 1) |[]
f_move_feedback_2:(fact move_feedback_2 10us 1 1) |[]

move_feedback:(tdp [f_move_feedback_1 f_move_feedback_2] [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; link.

link_1:(iidp move [self_right_hand 10us (vec3 10 10 10) 0us (vec3 0 0 0)] 1) |[]
f_link_1:(fact link_1 0us 1 1) |[]

link_2:(iidp move [a_cube 10us (vec3 10 10 10) 0us (vec3 0 0 0)] 1) |[]
f_link_2:(fact link_2 0us 1 1) |[]

link:(cdp [f_link_1 f_link_2] [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; grab.

grab_1:(mk.val self_right_hand attachment a_cube 1) |[]
f_grab_1:(fact grab_1 0us 1 1) |[]

grab_2:(icdp link [self_right_hand a_cube] 1) |[]
f_grab_2:(fact grab_2 10us 1 1) |[]

grab:(csa f_grab_1 f_grab_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; grab feedback.

grab_feedback_1:(cmd grab_hand [self_right_hand] 1) |[]
f_grab_feedback_1:(fact grab_feedback_1 0us 1 1) |[]

grab_feedback_2:(mk.val self_right_hand attachment a_cube 1) |[]
f_grab_feedback_2:(fact grab_feedback_2 10us 1 1) |[]

grab_feedback:(csa f_grab_feedback_1 f_grab_feedback_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; grab req.

grab_req_1:(iidp same_pos [self_right_hand a_cube] 1) |[]
f_grab_req_1:(fact grab_req_1 0us 1 1) |[]

grab_req_2:(icsa grab [self_right_hand a_cube] 1) |[]
f_grab_req_2:(fact grab_req_2 10us 1 1) |[]

grab_req:(req f_grab_req_1 f_grab_req_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; reach.

reach_1:(iidp move [self_right_hand 10us (vec3 10 10 10) 0us (vec3 0 0 0)] 1) |[]
f_reach_1:(fact reach_1 0us 1 1) |[]

reach_2:(iidp same_pos [self_right_hand a_cube] 1) |[]
f_reach_2:(fact reach_2 10us 1 1) |[]

reach:(csa f_reach_1 f_reach_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; catch.

catch_pos:(mk.val a_cube position (vec3 0 0 0) 1) |[]
f_catch_pos:(fact catch_pos 0us 1 1) |[]

catch_1:(mk.pred f_catch_pos nil 1 1) |[]
f_catch_1:(fact catch_1 0us 1 1) |[]

catch_2:(icsa reach [self_right_hand a_cube 10us (vec3 0 0 0) 0us] 1) |[]
f_catch_2:(fact catch_2 10us 1 1) |[]

catch:(req f_catch_1 f_catch_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; release.

release_1:(mk.val self_right_hand attachment a_cube 1) |[]
f_release_1:(|fact release_1 0us 1 1) |[]

release_2:(icdp link [self_right_hand a_cube] 1) |[]
f_release_2:(|fact release_2 10us 1 1) |[]

release:(csa f_release_1 f_release_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; release feedback.

release_feedback_1:(cmd release_hand [self_right_hand] 1) |[]
f_release_feedback_1:(fact release_feedback_1 0us 1 1) |[]

release_feedback_2:(mk.val self_right_hand attachment a_cube 1) |[]
f_release_feedback_2:(|fact release_feedback_2 10us 1 1) |[]

release_feedback:(csa f_release_feedback_1 f_release_feedback_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]


; release req.

release_req_1:(icdp link [self_right_hand a_cube] 1) |[]
f_release_req_1:(fact release_req_1 0us 1 1) |[]

release_req_2:(icsa release [self_right_hand a_cube] 1) |[]
f_release_req_2:(fact release_req_2 10us 1 1) |[]

release_req:(req f_release_req_1 f_release_req_2 [stdout] 0us 1) [[SYNC_FRONT now 0 forever stdin nil 1]]







(inj []
      gi:(icst self_hand_position [self_right_hand (vec3 10 10 10) t] 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      target:(fact gi t 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      g:(mk.goal target self 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
   (inj []
      f_g:(fact g now 1 1)
      [SYNC_FRONT now 1 1 stdin nil]
   )
